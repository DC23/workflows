# Define some global configuration so we can more easily change some settings,
# such as where the final files get written or the name of the archive file.
# Note that in Snakefiles, you can use paths relative to the location of the
# Snakefile.


# the list of book names used to build the other file patterns
BOOK_NAMES = glob_wildcards('books/{book}.txt').book


# Define the rules that always run locally:
localrules: all, clean, create_archive


# pseudo-rule that tries to build everything.
# Just add all the final outputs that you want built.
# In this case, the archive file depends on everything else,
# so just the archive is sufficient here.
rule all:
    input: 'results/zipf_analysis.tgz'

# delete everything so we can re-run things
rule clean:
    shell:
        '''
        rm -rf {OUTPUT_DIR}
        rm -rf __pycache__
        rm -rf *.out
        '''

# count words in one of our "books"
rule count_words:
    input:
        cmd='wordcount.py',
        book='books/{file}.txt'
    output: 'results/dats/{file}.dat'
    shell: 	'python {input.cmd} {input.book} {output}'

# plot one word count dat file
rule make_plots:
    input:
        cmd='plotcount.py',
        dat='results/dats/{file}.dat'
    output: 'results/plots/{file}.png'
    resources: gpu=1
    shell: 'python {input.cmd} {input.dat} {output}'

# generate summary table
rule zipf_test:
    input:
        cmd='zipf_test.py',
        books=expand('results/dats/{book}.dat', book=BOOK_NAMES)
    output: 'results/results.txt'
    shell:  'python {input.cmd} {input.books} > {output}'

# create an archive with all results
rule create_archive:
    input:
        expand('results/dats/{book}.dat', book=BOOK_NAMES),  # All dat files
        expand('results/plots/{book}.png', book=BOOK_NAMES), # All png files
        'results/results.txt'
    output: 'results/zipf_analysis.tgz'
    shell:
        '''
        cd results
        tar czvf zipf_analysis.tgz *
        '''
